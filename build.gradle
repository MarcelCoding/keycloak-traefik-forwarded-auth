plugins {
    id 'java'
    id 'io.freefair.lombok' version '5.3.0'
    id 'io.freefair.git-version' version '5.3.0'

    id 'pmd'
    id 'checkstyle'
    id 'com.github.spotbugs' version '4.6.2'
}

group 'com.github.marcelcoding.keycloak'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11

if (version.toString().endsWith('SNAPSHOT')) {
    version = 'edge'
} else if (version.toString().startsWith("v")) {
    version = version.toString().substring(1)
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    keycloakVersion = '12.0.3'
    junitVersion = '5.6.0'
    googleAutoServiceVerson = '1.0-rc7'
}

dependencies {
    // compileOnly "org.keycloak:keycloak-core:${keycloakVersion}"
    compileOnly "org.keycloak:keycloak-server-spi:${keycloakVersion}"
    compileOnly "org.keycloak:keycloak-server-spi-private:${keycloakVersion}"
    compileOnly "org.keycloak:keycloak-services:${keycloakVersion}"

    annotationProcessor "com.google.auto.service:auto-service:${googleAutoServiceVerson}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

jar {
    from "${rootDir}/LICENSE"
    manifest.attributes([
            'Specification-Title'     : project.name,
            'Specification-Version'   : project.version,
            'Specification-Vendor'    : 'Marcel Coding (https://github.com/MarcelCoding)',
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : project.version,
            'Implementation-Vendor'   : 'Marcel Coding (https://github.com/MarcelCoding)',
            'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
    ])
}

tasks.withType(JavaCompile) {
    doFirst {
        options.encoding = 'UTF-8'
    }
}

lombok {
    config.put('lombok.equalsandhashcode.callsuper', 'CALL')
    config.put('lombok.tostring.callsuper', 'CALL')
}

tasks.withType(Checkstyle) {
    exclude('**/module-info.java')
    ignoreFailures = true
    reports {
        xml.enabled(true)
        html.enabled(false)
    }
}

checkstyleMain {
    configFile = file("${rootDir}/config/checkstyle/main.xml")
}

checkstyleTest {
    configFile = file("${rootDir}/config/checkstyle/test.xml")
}

tasks.withType(Pmd) {
    ignoreFailures = true
    reports {
        xml.enabled(true)
        html.enabled(false)
    }
}

spotbugs {
    ignoreFailures = true
}
